{"version":3,"sources":["components/Buscador.js","components/Imagen.js","components/Paginacion.js","components/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","busquerdaRef","React","createRef","obtenerDatos","e","preventDefault","termino","current","value","props","datosBusquerda","onSubmit","this","className","ref","type","placeholder","Component","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","target","Paginacion","onClick","paginaAnterior","paginaSiguiente","Resultado","mostrarImagenes","imagenes","length","Fragment","map","key","id","App","state","pagina","scroll","document","querySelector","scrollIntoView","setState","consultarApi","url","axios","get","then","res","busqueda","data","hits","datosBusquerdas","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a443c492.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Buscador extends Component {\n\n    busquerdaRef = React.createRef();\n\n    obtenerDatos = (e) => {\n        e.preventDefault();\n\n        // Tomamos el valor del input\n        const termino = this.busquerdaRef.current.value;\n\n        // Lo enviamos al componente principal\n        this.props.datosBusquerda(termino);\n        \n    }\n\n    render() {\n        return (\n            <form onSubmit={this.obtenerDatos}>\n                <div className=\"row\">\n                    <div className=\"from-group col-md-8\">\n                        <input ref={this.busquerdaRef} type=\"text\" className=\"form-control form-control-lg\"\n                            placeholder=\"Busca tu imageeen. Ejemplo: Futbol\" />\n                    </div>\n\n                    <div className=\"from-group col-md-4\">\n                        <input type=\"submit\" className=\"btn btn-lg btn-danger btn-block\"\n                            value=\"Buscar...\" />\n                    </div>\n                </div>\n            </form >\n        );\n    }\n}\n\nexport default Buscador;","import React from 'react'\n\n// Los estados funciones no tienen estados\n\nfunction Imagen(props) {\n\n    const {largeImageURL, likes, previewURL, tags, views} = props.imagen\n    return (\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\n            <div className=\"card\">\n                <img src={previewURL} alt={tags} className=\"card-img-top\" />\n                <div className=\"card-body\">\n                    <p className=\"card-text\"> ‚ù§ {likes} me gustas </p>\n                    <p className=\"card-text\"> üëÄ {views} vistas </p>\n\n                    <a href={largeImageURL} target=\"_blank\" className=\"btn btn-primary btn-block\">Ver imagen</a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Imagen\n\n","import React from 'react'\n\nconst Paginacion = props => {\n    return (\n        <div className=\"py-3\">\n            <button onClick={props.paginaAnterior} type=\"button\" className=\"btn btn-info mr-1\">Anterior &larr</button>\n            <button onClick={props.paginaSiguiente} type=\"button\" className=\"btn btn-info\">Siguiente &rarr</button>\n\n        </div>\n    )\n}\n\nexport default Paginacion\n","import React, { Component } from 'react';\nimport Imagen from './Imagen';\nimport Paginacion from './Paginacion';\n\n\nclass Resultado extends Component {\n    \n    mostrarImagenes = () => {\n        const imagenes = this.props.imagenes;\n\n        if(imagenes.length === 0) return null;         \n\n        return(\n            <React.Fragment>\n                <div className=\"col-12 p-5 row\">\n                    {imagenes.map(imagen => (\n                        <Imagen\n                            key={imagen.id}\n                            imagen={imagen}\n                        />\n                    ))}\n                </div>\n                <Paginacion \n                    paginaAnterior={this.props.paginaAnterior}\n                    paginaSiguiente={this.props.paginaSiguiente}\n                />\n            </React.Fragment>\n        )\n    }\n    \n    render() {\n        return (\n            <div>\n                {this.mostrarImagenes()}\n            </div>\n        );\n    }\n}\n\nexport default Resultado;\n","import React, { Component } from 'react';\nimport Buscador from './components/Buscador';\nimport Resultado from './components/Resultado';\nimport axios from 'axios';\n\nclass App extends Component {\n\n  state = {\n    termino: '',\n    imagenes: [],\n    pagina: ''\n  }\n\n  scroll = () => {\n    const elemento = document.querySelector('.jumbotron');\n    elemento.scrollIntoView('smoot', 'start');\n  }\n\n  paginaAnterior = () => {\n    // Leer el state de la pagin acutal\n    let pagina = this.state.pagina;\n\n    //Leer si la pagina es 1 no ir mas atras\n    if (pagina === 1) return null;\n\n    //Restar 1 a la pagina acutal\n    pagina -= 1;\n\n    //Agregar el cambio al state\n    this.setState({\n      pagina\n    }, () => {\n      this.consultarApi();\n      this.scroll();\n    });\n  }\n\n  paginaSiguiente = () => {\n    // Leer el state de la pagin acutal\n    let pagina = this.state.pagina;\n\n    //Sumar 1 a la pagina acutal\n    pagina += 1;\n\n    //Agregar el cambio al state\n    this.setState({\n      pagina\n    }, () => {\n      this.consultarApi();\n      this.scroll();\n    });\n\n  }\n\n  consultarApi = () => {\n    const termino = this.state.termino;\n    const pagina = this.state.pagina;\n    const url = `https://pixabay.com/api/?key=14517952-b37aa7ad39b401663881c7ef0&q=${termino}&per_page=30&page=${pagina}`;\n\n    // console.log(url);\n    // fetch(url)\n    //   .then(respuesta => respuesta.json())\n    //   .then(resultado => this.setState({ imagenes: resultado.hits }));\n    axios.get(url)\n      .then(res => {\n        const busqueda = res.data.hits;\n        this.setState({ imagenes: busqueda });\n      })\n\n  }\n\n  datosBusquerdas = (termino) => {\n    this.setState({\n      // para cambiar el valor del statado.termino como la clave es termino y recivira el varlor termino se pone solo termino para no poner termino: termino\n      termino: termino,\n      pagina: 1\n    }, () => {\n      this.consultarApi();\n    })\n  }\n  render() {\n    return (\n      <div className=\"App container mt-3\">\n        <div className=\"jumbotron\">\n\n          <p className=\"lead text-center\">Buscador de Imagenes</p>\n\n          <Buscador\n            datosBusquerda={this.datosBusquerdas}\n          />\n\n        </div>\n\n        <div className=\"row justify-content-center\">\n          <Resultado\n            imagenes={this.state.imagenes}\n            paginaAnterior={this.paginaAnterior}\n            paginaSiguiente={this.paginaSiguiente}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}